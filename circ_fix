#! /usr/bin/env python
"""

This script takes reads from a BAM file that have been mapped to a doubled, or
extended circular reference and the coordinate that represents the first
repeated base in the reference. The program splits any aligned segment that
falls across this point into two aligned segments.

"""


import pysam
import argparse
import sys


def find_q_split_point(aln, junc):
    """
    Finds the first matched query base after the last unrepeated base of the
    reference sequence.

    Args:
        aln: The pysam.AlignedSegment
        junc: The reference position of the first repeated base (0-based) (int)
    Returns:
        qpos: The index in the query sequence of the first base matched to a
              repeated reference base.
        rpos: The index of the reference sequence where the base at qpos is
              matched.
    """
    found = False
    for qpos, rpos in aln.get_aligned_pairs():
        # Goes to the next matched qpos after the junction point.
        if rpos and int(rpos) == junc:
            found = True
        if found and qpos and rpos:
            return int(qpos), int(rpos)


def aln_copy(aln):
    """
    Copies an AlignedSegment object (copy and deepcopy segfault).
    """
    new_aln = pysam.AlignedSegment()
    new_aln.query_name = aln.query_name
    new_aln.query_sequence = aln.query_sequence
    new_aln.query_qualities = aln.query_qualities
    new_aln.flag = aln.flag
    new_aln.reference_id = aln.reference_id
    new_aln.reference_start = aln.reference_start
    new_aln.mapping_quality = aln.mapping_quality
    new_aln.cigar = aln.cigar
    new_aln.next_reference_id = aln.next_reference_id
    new_aln.next_reference_start = aln.next_reference_start
    new_aln.template_length = aln.template_length
    new_aln.tags = aln.tags
    return new_aln


def explode_cigar(cigartuples):
    """
    Takes a cigartuple list and explodes into a list of operations.

    example:
        explode_cigar([(0, 10), (1, 2), (0,5)])
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0]

    """
    return sum([[oper] * n for oper, n in cigartuples], list())


def unexplode_cigar(exploded_cig):
    """
    Takes list of cigar operations and summarizes as a cigartuple list.

    example:
        unexplode_cigar([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0])
        [(0, 10), (1, 2), (0,5)]
    """
    cur_oper = None
    cur_count = 0

    res = list()
    for oper in exploded_cig:
        if oper == cur_oper:
            cur_count += 1
        else:
            if cur_oper is not None:
                res.append((cur_oper, cur_count))
            cur_oper = oper
            cur_count = 1
    else:
        if cur_oper is not None:
            res.append((cur_oper, cur_count))
    return res


def split_aln_cigar(aln, qpos):
    """
    Splits the cigartuple of the alignment on the given query position
    """
    exploded_cig = explode_cigar(aln.cigartuples)
    i = 0
    for oper in exploded_cig:
        # If the operation is one that corresponds to a base in the query seq
        if oper in [0, 1, 4, 7, 8]:
            i += 1
        if i == qpos:
            break
    return (unexplode_cigar(exploded_cig[0:i]),
            unexplode_cigar(exploded_cig[i:]))


def split_aln(aln, point):
    """
    Splits the AlignedSegment into two segments at the given reference point.
    Splits the query sequence, query qualities, and cigar. Sets the next
    segment fields and flags.

    Args:
        aln: the original aligned sequence (assumed to be unpaired.)
        qpos: the first repeated base in the reference, the first matched
              position that should be in the second segment.
    Returns:
        seg1, seg2: The two resulting aligned segments.
    """
    seg1 = aln_copy(aln)
    seg2 = aln_copy(aln)

    qpos, rpos = find_q_split_point(aln, point)

    seg1.query_sequence = aln.query_sequence[0:qpos]
    seg1.query_qualities = aln.query_qualities[0:qpos]

    seg2.query_sequence = aln.query_sequence[qpos:]
    seg2.query_qualities = aln.query_qualities[qpos:]

    # Split cigar
    cig1, cig2 = split_aln_cigar(aln, qpos)
    seg1.cigar = cig1
    seg2.cigar = cig2

    seg2.reference_start = rpos % point

    # Fill in next segment fields.
    seg1.next_reference_id = seg2.reference_id
    seg1.next_reference_start = seg2.reference_start
    seg2.next_reference_id = seg1.reference_id
    seg2.next_reference_start = seg1.reference_start

    # fix flags
    seg1.flag |= (seg1.flag & 0x10) << 1
    seg2.flag |= (seg2.flag & 0x10) << 1
    seg1.flag |= 0x43
    seg2.flag |= 0x83

    return seg1, seg2


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("junction", type=int, metavar="position")
    parser.add_argument("bam_file", type=str, metavar="reads.bam")

    args = parser.parse_args()

    bamfile = pysam.AlignmentFile(args.bam_file, 'rb')
    ref_id = bamfile.references[0]
    with pysam.AlignmentFile('-', 'wb', template=bamfile) as outbam:
       for aln in bamfile.fetch(ref_id, start=args.junction,
                                        end=args.junction + 1):
           seg1, seg2 = split_aln(aln, args.junction)
           outbam.write(seg1)
           outbam.write(seg2)

    return 0


if __name__ == "__main__":
    sys.exit(main())
